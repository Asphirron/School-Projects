/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package reviewer_requiem_v2;

import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author admin
 */
public class EditorFrame extends MainMenu {
    private JFrame editorFrame;
    private javax.swing.JButton addChallengeBtn;
    private javax.swing.JButton addQuestionBtn;
    private javax.swing.JButton backButton;
    private javax.swing.JPanel challengeListPanel;
    private javax.swing.JTable challengeListTable;
    private javax.swing.JButton deleteChallengeBtn;
    private javax.swing.JButton deleteQuestionBtn;
    private javax.swing.JButton editChallengeBtn;
    private javax.swing.JButton editQuestionBtn;
    private javax.swing.JPanel editorMenuMainPanel;
    private javax.swing.JTabbedPane editorTabbedPane;
    private javax.swing.JPanel questionListPanel;
    private javax.swing.JScrollPane questionListScrollPane;
    private javax.swing.JScrollPane questionListScrollPane1;
    protected javax.swing.JTable questionListTable;

    /**
     * Creates new form EditorFrame
     */
    
    public EditorFrame() {
    
        
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                initComponents();
                updateTables();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editorFrame = new JFrame();
        editorMenuMainPanel = new javax.swing.JPanel();
        editorTabbedPane = new javax.swing.JTabbedPane();
        questionListPanel = new javax.swing.JPanel();
        javax.swing.JLabel questionListTitle = new javax.swing.JLabel();
        questionListScrollPane = new javax.swing.JScrollPane();
        questionListTable = new javax.swing.JTable();
        addQuestionBtn = new javax.swing.JButton();
        deleteQuestionBtn = new javax.swing.JButton();
        editQuestionBtn = new javax.swing.JButton();
        challengeListPanel = new javax.swing.JPanel();
        javax.swing.JLabel questionListTitle1 = new javax.swing.JLabel();
        questionListScrollPane1 = new javax.swing.JScrollPane();
        challengeListTable = new javax.swing.JTable();
        addChallengeBtn = new javax.swing.JButton();
        deleteChallengeBtn = new javax.swing.JButton();
        editChallengeBtn = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        editorFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        editorFrame.setResizable(false);

        editorTabbedPane.setBackground(new java.awt.Color(204, 204, 255));

        questionListTitle.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        questionListTitle.setText("QUESTION LIST");

        questionListScrollPane.setBackground(new java.awt.Color(153, 153, 153));

        questionListTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        questionListTable.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        questionListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Question", "Answer", "Type", "Difficulty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        questionListTable.setToolTipText("Question Table");
        questionListTable.getTableHeader().setReorderingAllowed(false);
        questionListScrollPane.setViewportView(questionListTable);
        if (questionListTable.getColumnModel().getColumnCount() > 0) {
            questionListTable.getColumnModel().getColumn(0).setMinWidth(50);
            questionListTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            questionListTable.getColumnModel().getColumn(0).setMaxWidth(50);
            questionListTable.getColumnModel().getColumn(1).setMinWidth(120);
            questionListTable.getColumnModel().getColumn(1).setPreferredWidth(120);
            questionListTable.getColumnModel().getColumn(2).setPreferredWidth(80);
            questionListTable.getColumnModel().getColumn(4).setMinWidth(60);
            questionListTable.getColumnModel().getColumn(4).setPreferredWidth(60);
            questionListTable.getColumnModel().getColumn(4).setMaxWidth(60);
        }

        addQuestionBtn.setText("Add");
        addQuestionBtn.setToolTipText("Add a challenge into the table");
        addQuestionBtn.setFocusable(false);
        addQuestionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addQuestionBtnActionPerformed(evt);
            }
        });

        deleteQuestionBtn.setText("Delete");
        deleteQuestionBtn.setToolTipText("Delete the selected row");
        deleteQuestionBtn.setFocusable(false);
        deleteQuestionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteQuestionBtnActionPerformed(evt);
            }
        });

        editQuestionBtn.setText("Edit");
        editQuestionBtn.setToolTipText("Edit the selected row");
        editQuestionBtn.setFocusable(false);
        editQuestionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editQuestionBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout questionListPanelLayout = new javax.swing.GroupLayout(questionListPanel);
        questionListPanel.setLayout(questionListPanelLayout);
        questionListPanelLayout.setHorizontalGroup(
            questionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionListPanelLayout.createSequentialGroup()
                .addGroup(questionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(questionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(questionListPanelLayout.createSequentialGroup()
                            .addGap(235, 235, 235)
                            .addComponent(questionListTitle))
                        .addGroup(questionListPanelLayout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addComponent(questionListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(questionListPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(editQuestionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteQuestionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addQuestionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        questionListPanelLayout.setVerticalGroup(
            questionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionListTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(questionListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addQuestionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteQuestionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editQuestionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        editorTabbedPane.addTab("Questions", questionListPanel);

        questionListTitle1.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        questionListTitle1.setText("CHALLENGE LIST");

        questionListScrollPane1.setBackground(new java.awt.Color(153, 153, 153));

        challengeListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "No. of Questions", "Difficulty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        questionListScrollPane1.setViewportView(challengeListTable);
        if (challengeListTable.getColumnModel().getColumnCount() > 0) {
            challengeListTable.getColumnModel().getColumn(0).setPreferredWidth(80);
            challengeListTable.getColumnModel().getColumn(0).setMaxWidth(80);
        }

        addChallengeBtn.setText("Add");
        addChallengeBtn.setToolTipText("Add a question into the table");
        addChallengeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChallengeBtnActionPerformed(evt);
            }
        });

        deleteChallengeBtn.setText("Delete");
        deleteChallengeBtn.setToolTipText("Delete the selected row");
        deleteChallengeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteChallengeBtnActionPerformed(evt);
            }
        });

        editChallengeBtn.setText("Edit");
        editChallengeBtn.setToolTipText("Edit the selected row");
        editChallengeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editChallengeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout challengeListPanelLayout = new javax.swing.GroupLayout(challengeListPanel);
        challengeListPanel.setLayout(challengeListPanelLayout);
        challengeListPanelLayout.setHorizontalGroup(
            challengeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(challengeListPanelLayout.createSequentialGroup()
                .addGroup(challengeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(challengeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(challengeListPanelLayout.createSequentialGroup()
                            .addGap(235, 235, 235)
                            .addComponent(questionListTitle1))
                        .addGroup(challengeListPanelLayout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addComponent(questionListScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(challengeListPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(editChallengeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteChallengeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addChallengeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        challengeListPanelLayout.setVerticalGroup(
            challengeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(challengeListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionListTitle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(questionListScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(challengeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addChallengeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteChallengeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editChallengeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        editorTabbedPane.addTab("Challenge", challengeListPanel);

        backButton.setText("Back");
        backButton.setToolTipText("Return to main menu");
        backButton.setFocusable(false);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editorMenuMainPanelLayout = new javax.swing.GroupLayout(editorMenuMainPanel);
        editorMenuMainPanel.setLayout(editorMenuMainPanelLayout);
        editorMenuMainPanelLayout.setHorizontalGroup(
            editorMenuMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editorMenuMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editorMenuMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editorTabbedPane)
                    .addGroup(editorMenuMainPanelLayout.createSequentialGroup()
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        editorMenuMainPanelLayout.setVerticalGroup(
            editorMenuMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editorMenuMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(editorFrame.getContentPane());
        editorFrame.getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorMenuMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorMenuMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        editorFrame.pack();
        editorFrame.setLocationRelativeTo(null);
        editorFrame.setVisible(true);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        clearTables();
        editorFrame.dispose();
        
        
    }//GEN-LAST:event_backButtonActionPerformed

    private void editQuestionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editQuestionBtnActionPerformed
        int selectedRow = questionListTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) questionListTable.getModel();
        
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
        }else{
            int id = setID(questionBank);
            String question = JOptionPane.showInputDialog(null,"Enter the Question");
            String answer = JOptionPane.showInputDialog(null,"Enter the Answer");
            String type = JOptionPane.showInputDialog(null,"Enter the Type");
            String diff = JOptionPane.showInputDialog(null,"Enter the Difficulty");   
                    
            model.setValueAt(id, selectedRow, 0);
            model.setValueAt(question, selectedRow, 1);
            model.setValueAt(answer, selectedRow, 2);
            model.setValueAt(type, selectedRow, 3);
            model.setValueAt(diff, selectedRow, 4);
            for(Question q : questionBank){
            if(objToInt(model.getValueAt(selectedRow,0)) == q.getID()){
                q.setID(id); q.setAnswer(answer); q.setType(type); q.setDifficulty(diff);
            }
        }
        }
        
    }//GEN-LAST:event_editQuestionBtnActionPerformed

    private void deleteQuestionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteQuestionBtnActionPerformed
        int selectedRow = questionListTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) questionListTable.getModel();

        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
        }else{
            int choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?",
                        "Remove Confirmation", JOptionPane.YES_NO_OPTION);
                
                if (choice == JOptionPane.YES_OPTION) {
                    Iterator<Question> iterator = questionBank.iterator();

                    while (iterator.hasNext()) {
                        Question currentValue = iterator.next();

                        // Check if the current element matches the value to be removed
                        if(currentValue.getID() == objToInt(model.getValueAt(selectedRow, 0))) {
                            // Use the iterator's remove method to remove the element
                            iterator.remove();
                        }
                    }
                    model.removeRow(selectedRow);
                }
        }
        
    }//GEN-LAST:event_deleteQuestionBtnActionPerformed

    private void deleteChallengeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteChallengeBtnActionPerformed
        int selectedRow = challengeListTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) challengeListTable.getModel();

        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
        }else{
            int choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?",
                        "Remove Confirmation", JOptionPane.YES_NO_OPTION);
                
                if (choice == JOptionPane.YES_OPTION) {
                    Iterator<Question> iterator = questionBank.iterator();

                    while (iterator.hasNext()) {
                        Question currentValue = iterator.next();

                        // Check if the current element matches the value to be removed
                        if(currentValue.getID() == objToInt(model.getValueAt(selectedRow, 0))) {
                            // Use the iterator's remove method to remove the element
                            iterator.remove();
                        }
                    }
                    
                    model.removeRow(selectedRow);
                }
        }
        
    }//GEN-LAST:event_deleteChallengeBtnActionPerformed

    private void editChallengeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editChallengeBtnActionPerformed
        int selectedRow = challengeListTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) challengeListTable.getModel();
        int id = objToInt(model.getValueAt(selectedRow, 0));
        new addChallengeMenu(2, id);
        editorFrame.setVisible(false);
        editorFrame.dispose();  
                
    }    
        
    

    private void addQuestionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addQuestionBtnActionPerformed
        new addQuestionMenu();
        editorFrame.setVisible(false);
        editorFrame.dispose();
        
    }//GEN-LAST:event_addQuestionBtnActionPerformed

    private void addChallengeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChallengeBtnActionPerformed
        new addChallengeMenu(1, 0);
        editorFrame.setVisible(false);
        editorFrame.dispose();
    }//GEN-LAST:event_addChallengeBtnActionPerformed

    
        
   

    private void addQuestion(int id, String question, String answer, String type, String diff) {
        Object[] rowData = {id, question, answer, type, diff};
        DefaultTableModel model = (DefaultTableModel) questionListTable.getModel();
        model.addRow(rowData);
    }
    private void addChallenge(int id, String title, int numOfQuestions,String diff) {
        Object[] rowData = {id, title, numOfQuestions, diff};
        DefaultTableModel model = (DefaultTableModel) challengeListTable.getModel();
        model.addRow(rowData);
    }
    private void clearTables(){
        DefaultTableModel questionTable = (DefaultTableModel) questionListTable.getModel();
        questionTable.setRowCount(0);
        DefaultTableModel challengeTable = (DefaultTableModel) challengeListTable.getModel();
        challengeTable.setRowCount(0);
    }
    private void updateTables(){
        clearTables();
        
        for(Question q : questionBank){
            addQuestion(q.getID(),q.getQuestion(),q.getAnswer(),q.getType(),q.getDifficulty());
        }
        
        for(Challenge c : challengeList){
            addChallenge(c.getID(),c.getTitle(),c.getNumOfQuestions(),c.getDifficulty());
        }
    }
    
    private int objToInt(Object obj){
        int intValue = 0;
        if (obj != null && obj instanceof Integer) {
            // Convert the object to int using intValue()
            intValue = ((Integer) obj).intValue();
        }
        return intValue;
    }
}
