
package reviewer_requiem_v2;

import java.awt.Color;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class addChallengeMenu extends EditorFrame {
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JFrame addChallengeFrame;
    private javax.swing.JButton addBtn;
    private javax.swing.JPanel addChallengeMainPanel;
    private javax.swing.JLabel addChallengeTitle;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton createChallengeBtn;
    private javax.swing.JLabel diffBtn;
    private javax.swing.JComboBox<String> diffSelector;
    protected javax.swing.JTable qBankTable;
    protected javax.swing.JTable qListTable;
    private javax.swing.JLabel questionBankLbl;
    private javax.swing.JScrollPane questionBankScrollPane;
    private javax.swing.JLabel questionCount;
    private javax.swing.JLabel questionListLbl;
    private javax.swing.JScrollPane questionListScrollPane;
    private javax.swing.JButton removeBtn;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JTextField titleTextField;
    private int mode = 1;
    private int globalID = 0;
    // End of variables declaration//GEN-END:variables
    /**
     * Creates new form addChallengeMenu
     */
    public addChallengeMenu(int mode, int id) {
        this.mode = mode;
        this.globalID = id;
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                initComponents();
                updateTables();
            }
        });
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        addChallengeFrame = new JFrame();
        addChallengeMainPanel = new javax.swing.JPanel();
        diffSelector = new javax.swing.JComboBox<>();
        questionListLbl = new javax.swing.JLabel();
        diffBtn = new javax.swing.JLabel();
        javax.swing.JSeparator separator1 = new javax.swing.JSeparator();
        titleTextField = new javax.swing.JTextField();
        addChallengeTitle = new javax.swing.JLabel();
        titleLbl = new javax.swing.JLabel();
        questionListScrollPane = new javax.swing.JScrollPane();
        qListTable = new javax.swing.JTable();
        removeBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        questionBankScrollPane = new javax.swing.JScrollPane();
        qBankTable = new javax.swing.JTable();
        questionBankLbl = new javax.swing.JLabel();
        javax.swing.JSeparator separator2 = new javax.swing.JSeparator();
        createChallengeBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        questionCount = new javax.swing.JLabel();

        addChallengeFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addChallengeFrame.setResizable(false);
        addChallengeFrame.setVisible(true);

        diffSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Easy", "Normal", "Hard" }));

        questionListLbl.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        questionListLbl.setText("Question List");

        diffBtn.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        diffBtn.setText("Difficulty");

        addChallengeTitle.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        addChallengeTitle.setText("Create a Challenge");

        titleLbl.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        titleLbl.setText("Title");

        qListTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        qListTable.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        qListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Question", "Answer", "Type", "Difficulty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        qListTable.setToolTipText("Question Table");
        qListTable.getTableHeader().setReorderingAllowed(false);
        questionListScrollPane.setViewportView(qListTable);

        removeBtn.setText("Remove a Question from the List");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        addBtn.setText("Add Question from Question Bank");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        qBankTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        qBankTable.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        qBankTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Question", "Answer", "Type", "Difficulty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        qBankTable.setToolTipText("Question Table");
        qBankTable.getTableHeader().setReorderingAllowed(false);
        questionBankScrollPane.setViewportView(qBankTable);

        questionBankLbl.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        questionBankLbl.setText("Question Bank");

        createChallengeBtn.setText("Create Challenge");
        createChallengeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createChallengeBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        questionCount.setText("Questions: 0");

        javax.swing.GroupLayout addChallengeMainPanelLayout = new javax.swing.GroupLayout(addChallengeMainPanel);
        addChallengeMainPanel.setLayout(addChallengeMainPanelLayout);
        addChallengeMainPanelLayout.setHorizontalGroup(
            addChallengeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addChallengeMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addChallengeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addChallengeMainPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(addChallengeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addChallengeMainPanelLayout.createSequentialGroup()
                                .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(titleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addChallengeMainPanelLayout.createSequentialGroup()
                                .addComponent(diffBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(diffSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addChallengeMainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addChallengeTitle)
                        .addGap(145, 145, 145))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addChallengeMainPanelLayout.createSequentialGroup()
                        .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createChallengeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addComponent(separator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(questionBankScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(questionListScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(separator2)
                    .addGroup(addChallengeMainPanelLayout.createSequentialGroup()
                        .addGroup(addChallengeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addChallengeMainPanelLayout.createSequentialGroup()
                                .addComponent(questionBankLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addBtn))
                            .addGroup(addChallengeMainPanelLayout.createSequentialGroup()
                                .addComponent(questionListLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(questionCount, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        addChallengeMainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addBtn, removeBtn});

        addChallengeMainPanelLayout.setVerticalGroup(
            addChallengeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addChallengeMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addChallengeTitle)
                .addGap(18, 18, 18)
                .addGroup(addChallengeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLbl)
                    .addComponent(titleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addChallengeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diffBtn)
                    .addComponent(diffSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addChallengeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionListLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeBtn)
                    .addComponent(questionCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(questionListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addChallengeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionBankLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(questionBankScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(separator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addChallengeMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createChallengeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(addChallengeFrame.getContentPane());
        addChallengeFrame.getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addChallengeMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addChallengeMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addChallengeFrame.pack();
        addChallengeFrame.setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        int selectedRow = qListTable.getSelectedRow();
        DefaultTableModel listTable = (DefaultTableModel) qListTable.getModel();
        
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
            return;
        }
       
        changeQuestionCount(listTable.getRowCount());
        listTable.removeRow(selectedRow);
        
    }//GEN-LAST:event_removeBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        int selectedRow = qBankTable.getSelectedRow();
        DefaultTableModel listTable = (DefaultTableModel) qListTable.getModel();
        DefaultTableModel bankTable = (DefaultTableModel) qBankTable.getModel();
        int id = objToInt(bankTable.getValueAt(selectedRow,0));
        for(Question q : questionBank){
            if(q.getID() == id){
                Object[] rowData = {q.getID(), q.getQuestion(), q.getAnswer(), q.getType(), q.getDifficulty()};
                listTable.addRow(rowData);
            }
        }
        changeQuestionCount(listTable.getRowCount());
        
        
        
    }//GEN-LAST:event_addBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        addChallengeFrame.dispose();
        new EditorFrame();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void createChallengeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createChallengeBtnActionPerformed
        int cID = setChallengeID(challengeList);
        String title = titleTextField.getText();
        String diff = diffSelector.getSelectedItem().toString();
        DefaultTableModel listTable = (DefaultTableModel) qListTable.getModel();
        ArrayList<Question> tempQuestionList = new ArrayList<>();
        
        if(titleTextField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Title is missing");
            return;
        }
        if(qListTable.getRowCount() < 10){
            JOptionPane.showMessageDialog(null, "Questions must be at least 10");
            return;
        }
        if(qListTable.getRowCount() > 50){
            JOptionPane.showMessageDialog(null, "Questions cannot exceed 50");
            return;
        }
        int count = 1;
        while(qListTable.getRowCount() > count){
            for(Question q : questionBank){
                if(q.getID() == objToInt(listTable.getValueAt(count, 0))){
                    tempQuestionList.add(q);
                }
            }
            count++;
        }

        if(mode == 1){
            Challenge newChallenge = new Challenge(cID,title,tempQuestionList);
            challengeList.add(newChallenge);
        }
        
        if(mode == 2){
            int index = 0;
            Challenge newChallenge = new Challenge(cID,title,tempQuestionList);
            for(Challenge c : challengeList){
                if(c.getID() == globalID){
                    challengeList.set(index, newChallenge = new Challenge(cID,title,tempQuestionList));
                }else{
                    index++;
                }
            }
            
        }
        addChallengeFrame.dispose();
        new EditorFrame();
        
    }//GEN-LAST:event_createChallengeBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addChallengeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addChallengeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addChallengeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addChallengeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        
    }

    
    private void clearTables(){
        DefaultTableModel listTable = (DefaultTableModel) qListTable.getModel();
        listTable.setRowCount(0);
        DefaultTableModel bankTable = (DefaultTableModel) qBankTable.getModel();
        bankTable.setRowCount(0);
    }
    private void updateTables(){
        clearTables();
        
        for(Question q : questionBank){
            addQuestion(q.getID(),q.getQuestion(),q.getAnswer(),q.getType(),q.getDifficulty());
        }
        
        
    }
    private void addQuestion(int id, String question, String answer, String type, String diff) {
        Object[] rowData = {id, question, answer, type, diff};
        DefaultTableModel model = (DefaultTableModel) qBankTable.getModel();
        model.addRow(rowData);
    }
    
    private int objToInt(Object obj){
        int intValue = 0;
        if (obj != null && obj instanceof Integer) {
            // Convert the object to int using intValue()
            intValue = ((Integer) obj).intValue();
        }
        return intValue;
    }
    private void changeQuestionCount(int count){
        questionCount.setText("Questions:" + count);
        if(count < 10 || count > 50){
            questionCount.setForeground(Color.RED);
        }else{
            questionCount.setForeground(Color.BLACK);
        }
        
    }

}
